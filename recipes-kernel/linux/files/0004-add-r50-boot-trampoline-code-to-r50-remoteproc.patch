diff --git a/drivers/remoteproc/zynqmp_r5_remoteproc.c b/drivers/remoteproc/zynqmp_r5_remoteproc.c
index 6e62a97edaa9..92654d344b5b 100644
--- a/drivers/remoteproc/zynqmp_r5_remoteproc.c
+++ b/drivers/remoteproc/zynqmp_r5_remoteproc.c
@@ -40,6 +40,7 @@
 #include <linux/firmware/xilinx/zynqmp/firmware.h>
 
 #include "remoteproc_internal.h"
+#define DEBUG
 
 /* Register offset definitions for RPU. */
 #define RPU_GLBL_CNTL_OFFSET	0x00000000 /* RPU control */
@@ -172,6 +173,7 @@ static void r5_boot_addr_config(struct zynqmp_r5_rproc_pdata *pdata)
 	else
 		tmp &= ~VINITHI_BIT;
 	reg_write(pdata->rpu_base, offset, tmp);
+
 }
 
 /**
@@ -347,6 +349,8 @@ static int zynqmp_r5_rproc_start(struct rproc *rproc)
 	struct device *dev = rproc->dev.parent;
 	struct zynqmp_r5_rproc_pdata *local = rproc->priv;
 	const struct zynqmp_eemi_ops *eemi_ops = zynqmp_pm_get_eemi_ops();
+/* danap */
+	struct rproc_mem_entry *mem, *nmem;
 
 	dev_dbg(dev, "%s\n", __func__);
 
@@ -373,6 +377,23 @@ static int zynqmp_r5_rproc_start(struct rproc *rproc)
 	eemi_ops->force_powerdown(local->rpu_pd_id,
 				  ZYNQMP_PM_REQUEST_ACK_BLOCKING);
 	r5_boot_addr_config(local);
+/* danap */
+
+  list_for_each_entry_safe(mem, nmem, &local->mems, node) {
+        if ((mem->dma & 0xFFF00000) == 0xFFE00000) {
+        	reg_write(mem->va, 0, 0xea000000);
+        	reg_write(mem->va, 4, 0x78100000);
+        	reg_write(mem->va, 8, 0xe59f0004);
+        	reg_write(mem->va, 12, 0xe5901000);
+        	reg_write(mem->va, 16, 0xe12fff11);
+        	reg_write(mem->va, 20, 0x00000004);
+        }
+   }
+
+
+
+
+
 	/* Add delay before release from halt and reset */
 	usleep_range(400, 500);
 	eemi_ops->request_wakeup(local->rpu_pd_id,
@@ -390,7 +411,6 @@ static void zynqmp_r5_rproc_kick(struct rproc *rproc, int vqid)
 {
 	struct device *dev = rproc->dev.parent;
 	struct zynqmp_r5_rproc_pdata *local = rproc->priv;
-
 	dev_dbg(dev, "KICK Firmware to start send messages vqid %d\n", vqid);
 
 	/*
